import numpy as np
import pygame
import time
from Button import Button

# Σταθερές για το παιχνίδι
ROW_COUNT = 6
COLUMN_COUNT = 7
SQUARESIZE = 100
RADIUS = int(SQUARESIZE / 2.5)
WIDTH = COLUMN_COUNT * SQUARESIZE
HEIGHT = (ROW_COUNT+1)  * SQUARESIZE  
move_timer = None 
# Χρώματα
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)

# Διαστάσεις για το σκορ
SCORE_HEIGHT = SQUARESIZE
SCORE_WIDTH = SQUARESIZE 

# Αρχικοποίηση του Pygame
pygame.init()

# Δημιουργία οθόνης
size = (WIDTH, HEIGHT)
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Connect 4 Game")

# Αρχικά σκορ των παικτών
player1_score = 0
player2_score = 0

# Δημιουργία του πίνακα του παιχνιδιού
def create_board():
    return np.zeros((ROW_COUNT, COLUMN_COUNT))

# Τοποθέτηση του πιονιού στον πίνακα
def drop_piece(board, row, col, piece):
    if is_valid_location(board, col):
        if row is None:
            row = get_next_open_row(board, col)
        board[row][col] = piece

# Έλεγχος αν μια στήλη είναι διαθέσιμη για τοποθέτηση πιονιού
def is_valid_location(board, col):
    return board[ROW_COUNT - 1][col] == 0 and col >= 0 and col < COLUMN_COUNT

# Εύρεση της πρώτης διαθέσιμης σειράς για τοποθέτηση
def get_next_open_row(board, col):
    for r in range(ROW_COUNT):
        if board[r][col] == 0:
            return r

# Έλεγχος για νίκη
def winning_move(board, piece):
    # Έλεγχος για νίκη στις γραμμές
    for c in range(COLUMN_COUNT - 3):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][c + 1] == piece and board[r][c + 2] == piece and board[r][c + 3] == piece:
                return True

    # Έλεγχος για νίκη στις στήλες
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT - 3):
            if board[r][c] == piece and board[r + 1][c] == piece and board[r + 2][c] == piece and board[r + 3][c] == piece:
                return True

    # Έλεγχος για νίκη στις διαγωνίους (/)
    for c in range(COLUMN_COUNT - 3):
        for r in range(ROW_COUNT - 3):
            if board[r][c] == piece and board[r + 1][c + 1] == piece and board[r + 2][c + 2] == piece and board[r + 3][c + 3] == piece:
                return True

    # Έλεγχος για νίκη στις διαγωνίους (\)
    for c in range(COLUMN_COUNT - 3):
        for r in range(3, ROW_COUNT):
            if board[r][c] == piece and board[r - 1][c + 1] == piece and board[r - 2][c + 2] == piece and board[r - 3][c + 3] == piece:
                return True
    
    return False

# Έλεγχος αν ο πίνακας είναι γεμάτος
def is_board_full(board):
    return np.all(board != 0)

# Σχεδίαση του πίνακα στην οθόνη
def draw_board(board):
    screen.fill(BLUE)
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            # Σχεδίαση τετραγώνων για τοποθέτηση του πιονιού
            pygame.draw.rect(screen, BLUE, (c * SQUARESIZE, r * SQUARESIZE + SQUARESIZE, SQUARESIZE, SQUARESIZE))
            # Σχεδίαση κύκλων για τα πιόνια
            pygame.draw.circle(screen, (0, 0, 0), (int(c * SQUARESIZE + SQUARESIZE / 2), int(r * SQUARESIZE + SQUARESIZE / 2) + SQUARESIZE), RADIUS)

    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT):
            if board[r][c] == 1:
                pygame.draw.circle(screen, RED, (int(c * SQUARESIZE + SQUARESIZE / 2), HEIGHT - int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)
            elif board[r][c] == 2:
                pygame.draw.circle(screen, YELLOW, (int(c * SQUARESIZE + SQUARESIZE / 2), HEIGHT - int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)

    # Εμφάνιση του σκορ
    font = pygame.font.SysFont("monospace", 30)
    label1 = font.render(f"Player Red:{player1_score}", 1, RED)
    label2 = font.render(f"Player Yellow:{player2_score}", 1, YELLOW)
    screen.blit(label1, (40, 3))
    screen.blit(label2, (WIDTH - 310, 3))
    
    pygame.display.update()

# Εμφάνιση του νικητή
def show_winner(winner):
    global player1_score, player2_score
    font = pygame.font.SysFont("monospace", 40)
    if winner == 1:
        player1_score += 1
        text_surface = font.render("Red Player Wins!", True, RED)
    else:
        player2_score += 1
        text_surface = font.render("Yellow Player Wins!", True, YELLOW)
    text_rect = text_surface.get_rect(center=(WIDTH // 2, HEIGHT // 2))
    pygame.draw.rect(screen, (0, 0, 115), text_rect)
    screen.blit(text_surface, text_rect)
    pygame.display.update()
    time.sleep(1)

# Κύρια συνάρτηση για το παιχνίδι
def play_game():
    global move_timer  
    board = create_board()
    game_over = False
    turn = 0
    
    while not game_over:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()

            if event.type == pygame.MOUSEMOTION:
                posx = event.pos[0]
                screen.fill(BLUE)
                draw_board(board)
                column = int(posx // SQUARESIZE)
                pygame.draw.circle(screen, RED if turn == 0 else YELLOW, (int(column * SQUARESIZE + SQUARESIZE / 2), int(SQUARESIZE / 2)), RADIUS)
                pygame.display.update()

            if event.type == pygame.MOUSEBUTTONDOWN and move_timer is None:
                posx = event.pos[0]
                col = int(posx // SQUARESIZE)
                
                if is_valid_location(board, col):
                    row = get_next_open_row(board, col)
                    drop_piece(board, row, col, 1 if turn == 0 else 2)

                    if winning_move(board, 1 if turn == 0 else 2):
                        draw_board(board)
                        show_winner(1 if turn == 0 else 2)
                        move_timer = time.time() 
                        pygame.time.wait(2000)
                        board = create_board()
                        draw_board(board)
                        pygame.display.update()
                        turn = 0
                        continue
                else:
                    continue  # Αν η στήλη είναι γεμάτη, δεν κάνουμε τίποτα

                draw_board(board)
                pygame.display.update()
                turn += 1
                turn %= 2

        if is_board_full(board) and not winning_move(board, 1) and not winning_move(board, 2):
            draw_board(board)
            show_winner(0)  # 0 means draw
            move_timer = time.time() 
            board = create_board()
            draw_board(board)
            pygame.display.update()
            turn = 0
            continue
        
        draw_board(board)
        pygame.display.update()
        # Έλεγχος για την move_timer
        if move_timer is not None and time.time() - move_timer >= 2:  
            move_timer = None  # Επαναφορά της move_timer
        draw_board(board)
# Συνάρτηση για την εμφάνιση του μενού
#def display_menu():
    menu_running = True

    continue_button = Button(screen, WIDTH // 4, HEIGHT // 5, WIDTH // 2, HEIGHT // 6, "Continue")
    new_game_button = Button(screen, WIDTH // 4, HEIGHT // 5 * 2, WIDTH // 2, HEIGHT // 6, "New Game")
    exit_button = Button(screen, WIDTH // 4, HEIGHT // 5 * 3, WIDTH // 2, HEIGHT // 6, "Exit")

    while menu_running:
        screen.fill((0, 0, 128))
        continue_button.draw()
        new_game_button.draw()
        exit_button.draw()
        
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()

                if continue_button.is_clicked(mouse_pos):
                    menu_running = False
                    return 1

                elif new_game_button.is_clicked(mouse_pos):
                    play_game()
                    menu_running = False

                elif exit_button.is_clicked(mouse_pos):
                    pygame.quit()
                    exit()

# Συνάρτηση για την εμφάνιση του αρχικού μενού
def starting_menu():
    start_button = Button(screen, WIDTH // 4, HEIGHT // 5, WIDTH // 2, HEIGHT // 6, "Start Game")
    exit_button = Button(screen, WIDTH // 4, HEIGHT // 5 * 2, WIDTH // 2, HEIGHT // 6, "Exit")

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()

                if start_button.is_clicked(mouse_pos):
                    play_game()

                elif exit_button.is_clicked(mouse_pos):
                    pygame.quit()
                    exit()

        screen.fill((0, 0, 128))
        start_button.draw()
        exit_button.draw()

        pygame.display.update()

# Κύρια συνάρτηση
def main():
    starting_menu()

# Εκτέλεση της κύριας συνάρτησης
if __name__ == '__main__':
    main()
